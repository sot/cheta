*********************************************************************************
Log in to a machine with at least 16 Gb RAM and get into ska environment
*********************************************************************************

  ssh kadi
  cd ~/git/eng_archive
  ln -s /export/tom/tmp/eng_archive data  # some local disk

  # Do the following in general, but NOT if just updating stats data.
  # Fetch ends up seeing the >= 2000 archfiles.db and it cannot fetch
  # 1999 data properly.
  mkdir 1999; cd 1999; ln -s ../data data; cd ..

  ska
  export ENG_ARCHIVE=$PWD
  export CONTENT=<CONTENT>  # Upper case

In order to use a local install of pyfits 2.3, which is *much* faster, do:

  export PYTHONPATH=$PWD/local/lib/python2.7/site-packages

Note that for adding new content the trick of soft links for the 1999 data is used.
The archive update always goes to the ./data (non-1999) directory but fetch queries
for pre-2000 data always look in 1999.  It's a little hacky but works.

*********************************************************************************
Add a new content type to eng_archive
*********************************************************************************

* Add content definition to filestypes.dat.  The CONTENT value must be upper case

*********************************************************************************
* Get FITS archive files from 1999:001 through 2000:001
*********************************************************************************
  ./update_archive.py --date-now=2000:001 --date-start=1999:210 --create --content=$CONTENT

This puts files into ./data.  In --create mode there is no limit on file gaps.

*********************************************************************************
* Test in ska env within git/eng_archive
*********************************************************************************

ipython --pylab
impska
dat = fetch.MSID(<msid>, '1999:300', '1999:310')  # etc
dat.iplot()

*********************************************************************************
* Update/create the stats files in ska
*********************************************************************************
  ./update_archive.py --no-full --content $CONTENT --max-lookback-time 1e20

Probably worth checking the stats files quickly before going forward.

*********************************************************************************
* Bring archive up to current date
*********************************************************************************
  ./update_archive.py --content $CONTENT --date-start 2000:010 > $CONTENT.log 2>&1 &

*********************************************************************************
* Move FITS files into archive
*********************************************************************************
  python move_fits_archive.py $CONTENT

*********************************************************************************
* Copy h5 files into Ska
*********************************************************************************
  cp -rp data/$CONTENT $SKA/data/eng_archive/data/

*********************************************************************************
* Update version and install new package
*********************************************************************************

- Update Ska/engarchive/version.py

  python setup.py sdist
  cp -p dist/...tar.gz $SKA/pkgs/

- Update skare and install

===========================================
DONE
===========================================

-------Appendix -------------------------------------------------------------------

* Old-style initial ingest

    *********************************************************************************
    * Get FITS archive files from 1999:001 through 2000:001
    *********************************************************************************
    export TMP_FITS=/export/tom/tmp/eng_archive/tlm/  # some local disk
    python ingest_fits_archive.py $CONTENT $TMP_FITS

    This puts files into $TMP_FITS/$CONTENT

    *********************************************************************************
    * Ingest to a local H5 repo for $CONTENT
    *********************************************************************************
    python ingest_h5_archive.py $CONTENT $TMP_FITS

    This puts files into data/ which should be a link to a local disk.

    *********************************************************************************
    * Generate sql archfiles file
    *********************************************************************************
    python convert_headers.py $CONTENT

    *********************************************************************************
    * Fix file overlaps.  Do a dry run perhaps.
    *********************************************************************************
    python fix_ingest_h5.py $CONTENT --dry-run
    python fix_ingest_h5.py $CONTENT

    # For EPHEM content (and others in future??) use the --overwrite-partial
    # flag to make it overwrite overlapping rows instead of tossing the
    # entire archive file:
    python fix_ingest_h5.py $CONTENT --overwrite-partial

===========================================
OLD-STYLE INITIAL INGEST (END)
===========================================
